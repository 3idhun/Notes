Introduction to JS & Variables > Introduction to Dynamic Webapplications


Building Dynamic Webapplication involves:
- Client Server Communication
- Manipulating HTML and CSS
- Writing Application Logic 

console.log("Hello Midhun") #print statement

let message; #here let is used to declare variable

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Introduction to JS & Variables >  DOM and Event Fundamentals


let message;
message = 'Hello Rahul';
console.log(message);

Document Object Model (DOM) is the structured representation of the HTML document created by the browser. It allows JavaScript to manipulate, structure, and 
style your website. For accessing any HTML Element, you should always start with accessing the document object first. 


console.log(document.getElementById("headingElement")) #The getElementById() method helps to select the HTML Element with a specific ID.

textContent # set a specific style of an HTML Element using different CSS properties


Camel Case naming convention (starting letter of each word should be in the upper case except for the first word)

REFERENCE

<body>
  <h1 id="headingElement">Web Technologies</h1>
  <button onclick="manipulateStyles()">Change Heading</button>
</body>

function manipulateStyles() {
  document.getElementById("headingElement").textContent = "4.O Technologies";
  document.getElementById("headingElement").style.color = "blue";
}

---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Introduction to JS & Variables > Primitive Types & Conditionals 



Basically In JavaScript values are of two categories.

-Primitive Types

	-Number
	-Boolean
	-String
	-Undefined #refers to the value that is not being assigned.

-Reference Types



Operators


let a = '20';
console.log(typeof(a));  // typeof() is used to find the type of value.
let b = parseInt(a); //parseInt() is used to convert string into integer. 
console.log(typeof(b));  // number



Conditional Statements


if (conditionA) {
  Block1;
}
else if (conditionB) {
  Block2;
}
else {
  Block3;
}


---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Introduction to JS & Variables > Input Element and Math Functions


 Math Functions

 console.log(Math.random()); //function returns a random number (float value) in range 0 to less than 1 

 console.log(Math.ceil(95.906698007537561));  // 96  function always rounds a number up to the next largest integer.


 We can use the value property to get the value of the HTML input Element.

 document.getElementById("inputElement").value;


Comparison Operator

console.log(2 == '2');  // true Loose equality compares two values for equality but doesnâ€™t compare types of values. 
console.log(2 === '2');  // false Strict equality compares two values for equality including types of values



---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Arrays and Objects > Arrays & More DOM Manipulations 



Data Structures

- Arrays
- Objects
- Maps
- Sets


Arrays

let myArray = [5, "six", 2, 8.2];

console.log(myArray);                 // [5, "six", 2, 8.2]    Declaring an array
console.log(myArray[0]);              // 5                     Accessing elements of an array
myArray[1] = 6;                       // [5, 6, 2, 8.2]        Modifying arrray

Let lengthOfArray = myArray.length;                            Finding length of an array
console.log(lengthOfArray);           // 4

myArray.push(9);                      // [5, 6, 2, 8.2, 9]     Add items to end of the array
myArray.pop();                        // [5, 6, 2, 8.2]        Removes the last element from the list, Giving values in the brackets doesn't make any changes.
myArray.shift();                      // [6, 2, 8.2]           Removes the first element from the list 



Functions

function showMessage() {
  console.log("Hello");
}
showMessage();                        // Hello

It can also be expressed as:

let showMessage = function() {
  console.log("Hello");
};

showMessage();                        // This syntax is called function expression




let h1Element = document.createElement("h1");                          
h1Element.textContent = "Web Technologies";

let containerElement = document.getElementById("myContainer");
containerElement.appendChild(h1Element);

let btnElement = document.createElement("button");
btnElement.textContent = "Change Heading and Add Styles";
containerElement.appendChild(btnElement);

btnElement.onclick = function(){
  h1Element.textContent = "4.0 Technologies";
  h1Element.classList.add("heading");
};

let removeStylesBtnElement = document.createElement("button");
removeStylesBtnElement.textContent = "Remove Styles";
containerElement.appendChild(removeStylesBtnElement);

removeStylesBtnElement.onclick = function(){
  h1Element.classList.remove("heading");
};




Concept	                                        Description
document.createElement()	                  Creates a new HTML element
.textContent					  Sets the text inside an element
document.getElementById()			 Finds an element by its ID
.appendChild()					Adds a child element to the DOM
.onclick					Adds a click event handler
.classList.add() / .remove()			Adds or removes a CSS class


-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------





Arrays and Objects > Objects | Cheat Sheet



Objects

An Object is a collection of properties. For example, a person has a name, age, city, etc. These are the properties of the person.




We can add properties into {} as key: value pairs.

let person = {
  firstName: "Rahul",
  lastName: "Attuluri",
  age: 28,
};

console.log(person);  // Object {firstName: "Rahul", lastName: "Attuluri", age: 28}


The variables/identifiers should start with _ or $ or simply letters not with numbers.

console.log(person.firstName);  // Rahul   accessing certain values using dot notation i.e using dots. 


The values can also be accesed using bracket notation. as shown below

console.log(person["firstName"]);  // Rahul  


if the variable is not present while giving input, output is "undefined".


person.firstName = "Abhi"; will modify the list


Function as a value

let person = {
  firstName: "Rahul",
  lastName: "Attuluri",
  age: 28,
  run: function () {
    console.log("Start Running.");
  },
};

person.run();  // Start Running.


Object as a value

let person = {
  firstName: "Rahul",
  lastName: "Attuluri",
  age: 28,
  habits: ["Playing Chess", "Singing", "Dancing"],
  car: {
    name: "Audi",
    model: "A6",
    color: "White",
  },
};

console.log(person.car.name);  // Audi

console.log(person.car["model"]);  // A6


Array as a value

let person = {
  firstName: "Rahul",
  lastName: "Attuluri",
  age: 28,
  habits: ["Playing Chess", "Singing"],
};

console.log(person.habits);  // ["Playing Chess", "Singing"]

console.log(person.habits[0]);  // Playing Chess

console.log(person["habits"][1]);  // Singing


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------



For single line comments use "//" and for multiline comments us " /* "  " */ "



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------

Todos Application > Todos Application Introduction


<input type="checkbox" id="myCheckbox" />   // The HTML input element can be used to create a Checkbox
<label for="myCheckbox">Graduated</label>   // The HTML label element defines a Label.


htmlFor Property

let labelElement = document.createElement("label");
labelElement.htmlFor = "myCheckbox";                  // we can also use setAttribute as an alternate.


let labelElement = document.createElement("label");
labelElement.setAttribute("for", "myCheckbox");


Loops

- for...of Loop
- for...in Loop
- for Loop
- while Loop




The for...of Loop


let myArray = [1, 2, 3, 4];

for (let eachItem of myArray) {
   console.log(eachItem);
}




The HTML Code for creating a Todo Item:

<li class="todo-item-container d-flex flex-row">
  <input type="checkbox" id="checkboxInput" class="checkbox-input" />   
  <div class="d-flex flex-row label-container">
    <label for="checkboxInput" class="checkbox-label">
      Learn HTML
    </label>
    <div class="delete-icon-container">
      <i class="far fa-trash-alt delete-icon"></i>             // far fa-trash-alt delete-icon is inbuilt trash icon code copied.
    </div>
  </div>


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Todos Application > Todos Application | Part 2 | Cheat Sheet


<input type="text" placeholder="Enter your name" />   // placeholder makes a box where you can enter text in output.
alert("Enter Valid Text");                            // This creates an action where a dialog box appears with promt and OK button.




let checkboxElement = document.getElementById(checkboxId);
checkboxElement.checked = true;                            

// checked property returns the checked status of an HTML checkbox input element as a boolean value.



function onDeleteTodo(todoId) {
  let todoElement = document.getElementById(todoId);

  todoItemsContainer.removeChild(todoElement);          // removeChild() method removes an HTML child element 
}



function onTodoStatusChange(checkboxId, labelId) {
  let checkboxElement = document.getElementById(checkboxId);
  let labelElement = document.getElementById(labelId);

  labelElement.classList.toggle('checked');            
}

// classList.toggle() method is used to toggle between adding and removing a class name from an HTML element.


--------------------------------------------------------------------------------------------------------------------------------------------------------------------------



Todos Application 2 > Todos Application | Part 3 | Cheat Sheet


The environment in which JavaScript Code runs is called Execution Context. Execution Context is destroyed and recreated whenever we reload an Application.



Storage Mechanisms

Client-Side Data Storage is storing the data on the client (user's machine).

- Local Storage
- Session Storage
- Cookies
- IndexedDB

 To access and work with Local Storage we have below methods:

   - setItem()  localStorage.setItem("Key", "Value");   // method can be used for storing data in the Local Storage.
   - getItem()  localStorage.getItem("Key");            // method can be used for getting data from the Local Storage
   - clear()
   - removeItem()




let selectedColor = null;

console.log(selectedColor);  // null
console.log(typeof(selectedColor));  // object  

// We use null in a situation where we intentionally want a variable but don't need a value to it.



<textarea rows="8" cols="55"></textarea>  //  HTML textarea element can be used to take multiline text as an input.



--------------------------------------------------------------------------------------------------------------------------------------------------------------------------








  


















